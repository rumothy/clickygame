{"version":3,"sources":["logo.svg","components/Card/index.js","components/Main/index.js","components/MyNav/index.js","components/MyHeader/index.js","components/MyFooter/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","state","className","onClick","props","handleCardClick","id","alt","this","name","src","image","React","Component","Main","children","MyNav","href","message","score","topScore","MyHeader","MyFooter","App","characters","selectedCards","shuffleCards","array","currentIndex","length","randomIndex","temporaryValue","Math","floor","random","console","log","includes","setState","push","map","x","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kjHAAAA,EAAOC,QAAU,IAA0B,kC,+NCwB5BC,G,6NArBXC,MAAQ,G,wEAIE,IAAD,OACL,OACI,yBAAKC,UAAU,OAAOC,QAAS,kBAAM,EAAKC,MAAMC,gBAAgB,EAAKD,MAAME,MACvE,yBAAKJ,UAAU,iBACX,yBAAKK,IAAKC,KAAKJ,MAAMK,KAAMC,IAAKF,KAAKJ,MAAMO,SAE/C,yBAAKT,UAAU,WACX,2BAAG,gCAASM,KAAKJ,MAAMK,QAE3B,0BAAMP,UAAU,kB,GAdbU,IAAMC,Y,aCKVC,MAJf,SAAcV,GACV,OAAO,0BAAMF,UAAU,aAAaE,EAAMW,WCuB/BC,G,iNAvBXf,MAAQ,G,wEAGJ,OACA,yBAAKC,UAAU,UACX,4BACI,wBAAIA,UAAU,SACV,uBAAGe,KAAK,KAAR,gBAGJ,wBAAIf,UAAU,IACTM,KAAKJ,MAAMc,SAGhB,sCACYV,KAAKJ,MAAMe,MADvB,iBAC4CX,KAAKJ,MAAMgB,gB,GAhBnDR,IAAMC,Y,MCSXQ,MATf,SAAkBjB,GACd,OACI,4BAAQF,UAAU,UACd,4CACA,0G,MCOGoB,MAXf,SAAkBlB,GACd,OACI,gCACI,yBAAKF,UAAU,UAAf,kBAEI,yBAAKK,IAAI,QAAQG,IAAI,2BCkGtBa,E,2MA/FbtB,MAAQ,CACNuB,aACAL,MAAO,EACPC,SAAU,EACVK,cAAe,GACfP,QAAS,4B,EAGXQ,aAAe,SAACC,GAId,IAHA,IAAIC,EAAeD,EAAME,OACrBC,EAAc,EACdC,EAAiBJ,EAAM,GACpB,IAAMC,GACXE,EAAcE,KAAKC,MAAMD,KAAKE,SAAWN,GAGzCG,EAAiBJ,EAFjBC,GAAgB,GAGhBD,EAAMC,GAAgBD,EAAMG,GAC5BH,EAAMG,GAAeC,EAEvB,OAAOJ,G,EAGTtB,gBAAkB,SAAAC,GAChB6B,QAAQC,IAAI9B,GACZ,IAAMmB,EAAgB,EAAKxB,MAAMwB,cAC7BN,EAAQ,EAAKlB,MAAMkB,MACnBC,EAAW,EAAKnB,MAAMmB,SAEtBK,EAAcY,SAAS/B,IACzB,EAAKgC,SAAU,CAAEnB,MAAO,IACxB,EAAKmB,SAAU,CAAEb,cAAe,KAChC,EAAKa,SAAS,CAACpB,QAAS,aAGxB,EAAKjB,MAAMwB,cAAcc,KAAKjC,GAC9B6B,QAAQC,IAAI,EAAKnC,MAAMwB,iBACvBN,EACYC,GACV,EAAKkB,SAAU,CAAClB,SAAUD,IAE5B,EAAKmB,SAAU,CAACnB,MAAOA,IACvB,EAAKmB,SAAS,CAACpB,QAAS,4BAE1B,EAAKQ,aAAaF,GAClB,EAAKc,SAAS,CAACd,gB,wEAGP,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEL,MAAOX,KAAKP,MAAMkB,MAClBC,SAAUZ,KAAKP,MAAMmB,SACrBF,QAASV,KAAKP,MAAMiB,UACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGV,KAAKP,MAAMuB,WAAWgB,KAAI,SAAAC,GAAC,OAAK,kBAAC,EAAD,CAC7BC,IAAKD,EAAEnC,GACPA,GAAImC,EAAEnC,GACNG,KAAMgC,EAAEhC,KACRE,MAAO8B,EAAE9B,MACTN,gBAAiB,EAAKA,sBAI5B,kBAAC,EAAD,W,GAnEUO,IAAMC,WCEJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c484892d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./style.css\"\r\nclass Card extends React.Component {\r\n    state = {\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\" onClick={() => this.props.handleCardClick(this.props.id)}>\r\n                <div className=\"img-container\">\r\n                    <img alt={this.props.name} src={this.props.image}/>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <p><strong>{this.props.name}</strong></p>\r\n                </div>\r\n                <span className=\"selected\">\r\n                    \r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Main(props) {\r\n    return <main className=\"container\">{props.children}</main>;\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass MyNav extends React.Component {\r\n    state = {};\r\n\r\n    render() {\r\n        return (\r\n        <nav className=\"navbar\">\r\n            <ul>\r\n                <li className=\"brand\">\r\n                    <a href=\"/\">Clicky Game</a>\r\n                </li>\r\n                \r\n                <li className=\"\">\r\n                    {this.props.message}\r\n                </li>\r\n                \r\n                <li>\r\n                    Score: {this.props.score} | Top Score: {this.props.topScore}\r\n                </li>\r\n            </ul>\r\n        </nav>    \r\n        );\r\n    }\r\n}\r\n\r\nexport default MyNav;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction MyHeader(props) {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Clicky Game!</h1>\r\n            <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default MyHeader;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction MyFooter(props) {\r\n    return (\r\n        <footer>\r\n            <div className=\"bottom\">\r\n                \"Clicky Game! \"\r\n                <img alt=\"react\" src=\"public\\logo192.png\"/>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default MyFooter;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport characters from \"./smashCharacters.json\";\nimport Main from './components/Main';\nimport MyNav from \"./components/MyNav\";\nimport MyHeader from \"./components/MyHeader\";\nimport MyFooter from \"./components/MyFooter\";\n\nclass App extends React.Component {\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    selectedCards: [],\n    message: 'Click an image to begin!'\n  };\n\n  shuffleCards = (array) => {\n    let currentIndex = array.length;\n    let randomIndex = 0;\n    let temporaryValue = array[0];\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  handleCardClick = id => {\n    console.log(id);\n    const selectedCards = this.state.selectedCards;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n\n    if (selectedCards.includes(id)) {\n      this.setState( { score: 0 });\n      this.setState( { selectedCards: [] });\n      this.setState({message: \"Wrong!\"});\n    }\n    else {\n      this.state.selectedCards.push(id);\n      console.log(this.state.selectedCards);\n      score++;\n      if (score > topScore) {\n        this.setState( {topScore: score});\n      }\n      this.setState( {score: score});\n      this.setState({message: \"You guessed correctly!\"});\n    }\n    this.shuffleCards(characters);\n    this.setState({characters});\n  }\n\n  render() {\n    return (\n      <div>\n        <MyNav \n          score={this.state.score}\n          topScore={this.state.topScore} \n          message={this.state.message}/>\n        <MyHeader />\n        <Main>\n          {this.state.characters.map(x => (<Card\n              key={x.id}\n              id={x.id}\n              name={x.name} \n              image={x.image}\n              handleCardClick={this.handleCardClick}\n            /> \n          ))}\n        </Main>\n        <MyFooter />\n      </div>\n    );\n  }\n\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//       <Card />\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}